{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst axios = require(\"axios\");\nconst helmet = require(\"helmet\");\nconst app = express();\nconst PORT = 5000;\napp.use(cors());\napp.use(express.json());\napp.use(helmet());\napp.post(\"/check-security\", async (req, res) => {\n  const {\n    url\n  } = req.body;\n  if (!url) return res.status(400).json({\n    error: \"Thiếu URL\"\n  });\n  try {\n    const response = await axios.get(url);\n    const headers = response.headers;\n    let securityScore = 100;\n    let issues = [];\n    const securityChecks = [{\n      header: \"content-security-policy\",\n      message: \"Thiếu Content Security Policy (Bảo vệ chống XSS và các cuộc tấn công khác)\",\n      solution: `app.use(helmet.contentSecurityPolicy({\n    directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"trusted.com\"],\n        objectSrc: [\"'none'\"],\n        upgradeInsecureRequests: [],\n    }\n}));`,\n      deduction: 20\n    }, {\n      header: \"x-frame-options\",\n      message: \"Thiếu X-Frame-Options (Chống Clickjacking)\",\n      solution: `app.use(helmet.frameguard({ action: 'deny' }));`,\n      deduction: 15\n    }, {\n      header: \"x-xss-protection\",\n      message: \"Thiếu X-XSS-Protection (Bảo vệ chống tấn công XSS)\",\n      solution: `app.use(helmet.xssFilter());`,\n      deduction: 15\n    }, {\n      header: \"strict-transport-security\",\n      message: \"Thiếu Strict-Transport-Security (Bảo đảm chỉ sử dụng HTTPS)\",\n      solution: `app.use(helmet.hsts({ maxAge: 31536000, includeSubDomains: true, preload: true }));`,\n      deduction: 10\n    }, {\n      header: \"referrer-policy\",\n      message: \"Thiếu Referrer-Policy (Kiểm soát thông tin referrer gửi đi)\",\n      solution: `app.use(helmet.referrerPolicy({ policy: 'no-referrer' }));`,\n      deduction: 10\n    }, {\n      header: \"permissions-policy\",\n      message: \"Thiếu Permissions-Policy (Hạn chế quyền truy cập của trình duyệt)\",\n      solution: `app.use(helmet.permittedCrossDomainPolicies({ permittedPolicies: \"none\" }));`,\n      deduction: 10\n    }];\n    securityChecks.forEach(({\n      header,\n      message,\n      solution,\n      deduction\n    }) => {\n      if (!headers[header]) {\n        issues.push({\n          message,\n          solution\n        });\n        securityScore -= deduction;\n      }\n    });\n    res.json({\n      url,\n      securityScore,\n      issues\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Không thể kiểm tra URL này\"\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server chạy tại http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","axios","helmet","app","PORT","use","json","post","req","res","url","body","status","error","response","get","headers","securityScore","issues","securityChecks","header","message","solution","deduction","forEach","push","listen","console","log"],"sources":["D:/bt_html/Project_Part3/Mini Project/Security/frontend/src/App.js"],"sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst axios = require(\"axios\");\nconst helmet = require(\"helmet\");\n\nconst app = express();\nconst PORT = 5000;\n\napp.use(cors());\napp.use(express.json());\napp.use(helmet());\n\napp.post(\"/check-security\", async (req, res) => {\n    const { url } = req.body;\n    if (!url) return res.status(400).json({ error: \"Thiếu URL\" });\n\n    try {\n        const response = await axios.get(url);\n        const headers = response.headers;\n\n        let securityScore = 100;\n        let issues = [];\n\n        const securityChecks = [\n            {\n                header: \"content-security-policy\",\n                message: \"Thiếu Content Security Policy (Bảo vệ chống XSS và các cuộc tấn công khác)\",\n                solution: `app.use(helmet.contentSecurityPolicy({\n    directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"trusted.com\"],\n        objectSrc: [\"'none'\"],\n        upgradeInsecureRequests: [],\n    }\n}));`,\n                deduction: 20,\n            },\n            {\n                header: \"x-frame-options\",\n                message: \"Thiếu X-Frame-Options (Chống Clickjacking)\",\n                solution: `app.use(helmet.frameguard({ action: 'deny' }));`,\n                deduction: 15,\n            },\n            {\n                header: \"x-xss-protection\",\n                message: \"Thiếu X-XSS-Protection (Bảo vệ chống tấn công XSS)\",\n                solution: `app.use(helmet.xssFilter());`,\n                deduction: 15,\n            },\n            {\n                header: \"strict-transport-security\",\n                message: \"Thiếu Strict-Transport-Security (Bảo đảm chỉ sử dụng HTTPS)\",\n                solution: `app.use(helmet.hsts({ maxAge: 31536000, includeSubDomains: true, preload: true }));`,\n                deduction: 10,\n            },\n            {\n                header: \"referrer-policy\",\n                message: \"Thiếu Referrer-Policy (Kiểm soát thông tin referrer gửi đi)\",\n                solution: `app.use(helmet.referrerPolicy({ policy: 'no-referrer' }));`,\n                deduction: 10,\n            },\n            {\n                header: \"permissions-policy\",\n                message: \"Thiếu Permissions-Policy (Hạn chế quyền truy cập của trình duyệt)\",\n                solution: `app.use(helmet.permittedCrossDomainPolicies({ permittedPolicies: \"none\" }));`,\n                deduction: 10,\n            },\n        ];\n\n        securityChecks.forEach(({ header, message, solution, deduction }) => {\n            if (!headers[header]) {\n                issues.push({ message, solution });\n                securityScore -= deduction;\n            }\n        });\n\n        res.json({ url, securityScore, issues });\n    } catch (error) {\n        res.status(500).json({ error: \"Không thể kiểm tra URL này\" });\n    }\n});\n\napp.listen(PORT, () => {\n    console.log(`Server chạy tại http://localhost:${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}